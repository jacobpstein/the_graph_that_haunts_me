---
title: "The graph that haunts me"
author: "Jacob Patterson-Stein"
title-slide-attributes:
  data-background-image: "ghost.png"
  data-background-opacity: "0.3"
format:
  revealjs:
    transition: slide
    slide-number: true
    backgroundcolor: "#E7E7E5"
    fontfamily: Gill Sans
    embed-resources: true
    self-contained-math: true
---

##  {.center background-color="#CCCCFF"}

> **A quick and dirty way to measure the predictiveness of a metric is to compare the performance of the first half of a season to the second half.**
*- [Seth Partnow, former head of analytics for the Milwaukee Bucks](https://archive.is/iN5Ja#selection-197.3-197.15)*




## Important background

::: {layout="[ 40, 60 ]"}
::: {#first-column}
::: incremental

-   The biggest advance in basketball over the past 20 years was the realization that 3 is more than 2.
-   The average distribution of shots has gradually shifted (and is still shifting!)
-   But what about NBA defense?
:::
:::

::: {#second-column}
```{r, message=FALSE, warning = FALSE, fig.width=14, fig.height=16, out.width="100%"}

library(tidyverse)
library(extrafont)
library(nbastatR)
library(ggridges)
library(cowplot)
library(glue)
library(gganimate)
library(ggpubr)
library(janitor)
library(broom)

# set seed
set.seed(5202025)

# increase download connection size
Sys.setenv(VROOM_CONNECTION_SIZE = 131072*3)

# Turn off scientific notation 
options(scipen=999)

# this code is adapted from the great Owen Phillips, his code is here: https://thef5.substack.com/p/ggridges-shotchart


width = 50
height = 94/2
key_height = 19
inner_key_width = 12
outer_key_width = 16
backboard_width = 6
backboard_offset = 4
neck_length = 0.5
hoop_radius = 0.75
hoop_center_y = backboard_offset + neck_length + hoop_radius
three_point_radius = 23.75
three_point_side_radius = 22
three_point_side_height = 14

circle_points = function(center = c(0, 0), radius = 1, npoints = 360) {
  angles = seq(0, 2 * pi, length.out = npoints)
  return(data.frame(x = center[1] + radius * cos(angles),
                    y = center[2] + radius * sin(angles)))
}

court_points = data.frame(
  x = c(width / 2, width / 2, -width / 2, -width / 2, width / 2, 
        outer_key_width / 2, outer_key_width / 2, -outer_key_width / 2, -outer_key_width / 2,
        -backboard_width / 2, backboard_width / 2, 
        0, 0),
  y = c(height, 0, 0, height, height, 0, key_height, key_height, 0,
        backboard_offset, backboard_offset, 
        backboard_offset, backboard_offset + neck_length),
  desc = c(rep("perimeter", 5), rep("outer_key", 4), rep("backboard", 2),
           rep("neck", 2))
)

court_points <- court_points |> filter(desc != "perimeter")

# define foul circle
foul_circle = circle_points(center = c(0, key_height), radius = inner_key_width / 2)
foul_circle_top = filter(foul_circle, y > key_height) |> mutate(desc = "foul_circle_top")
foul_circle_bottom = filter(foul_circle, y < key_height) |> mutate(desc = "foul_circle_bottom")

# define halfcourt circle
half_circle = circle_points(center = c(0, height), radius = inner_key_width / 2)
half_circle_top = filter(half_circle, y > height) |> mutate(desc = "half_circle_top")
half_circle_bottom = filter(half_circle, y < height) |> mutate(desc = "half_circle_bottom")

# define hoop
hoop = circle_points(center = c(0, hoop_center_y), radius = hoop_radius) |> mutate(desc = "hoop") 
restricted = circle_points(center = c(0, hoop_center_y), radius = 4) |>
  filter(y >= hoop_center_y) |>
  mutate(desc = "restricted")

# define 3-point line
three_point_circle = circle_points(center = c(0, hoop_center_y), radius = three_point_radius) |> filter(y >= three_point_side_height)
three_point_line = data.frame(
  x = c(three_point_side_radius, three_point_side_radius, three_point_circle$x, -three_point_side_radius, -three_point_side_radius),
  y = c(0, three_point_side_height, three_point_circle$y, three_point_side_height, 0),
  desc = "three_point_line"
)

court_points = rbind(court_points , foul_circle_top, foul_circle_bottom, hoop, restricted, three_point_line)
court_points = mutate(court_points , dash = (desc == "foul_circle_bottom"))


#Load NBA court dimensions from github
devtools::source_url("https://github.com/Henryjean/NBA-Court/blob/main/CourtDimensions.R?raw=TRUE")

tms <- nba_teams()
tms <- tms |> filter(isNonNBATeam == 0 & slugTeam != "GLI" & nameTeam!= "Cairns Taipans")

tm.names <- unique(tms$nameTeam)

seasons <- c(1998,2025)

# Create team-season combinations
team_season_df <- expand_grid(team = tm.names, season = seasons)

# Pull shot data concisely
shotData <- pmap_dfr(
  team_season_df,
  function(team, season) {
    tryCatch({
      teams_shots(teams = team, seasons = season, season_types = "Regular Season", return_message = FALSE)
    }, error = function(e) {
      message(glue("Error for {team} {season}: {e$message}"))
      NULL
    })
  }
)


df <- shotData

df <- df |> mutate(locationX = as.numeric(as.character(locationX)) / 10,
                    locationY = as.numeric(as.character(locationY)) / 10 + hoop_center_y)

df$locationX <- df$locationX * -1 

df <- df |> filter(locationY <= 50)

df$grouplocY <- cut(df$locationY, seq(0, 90, 1))

df <- df |> group_by(grouplocY) |> mutate(count = n()) |> filter(count >= 50) |> 
  rename("season" = yearSeason) |> 
  filter(!is.na(season)) |>
  mutate(season_label = paste0(season - 1, "-", substr(season, 3, 4)))

p <- df |> 
  ggplot(aes(x = locationX, y = grouplocY)) +
  geom_density_ridges2(aes(fill = count), color = 'white', size = .25, scale = 7.5, bandwidth = 2.5, alpha = 0.6) +
  coord_fixed(clip = 'off') + 
  usaidplot::usaid_plot(data_type = "continuous") +
  theme(legend.position = 'none',
        , panel.grid.major.y = element_blank()
        , panel.grid.minor.y = element_blank()
        , panel.background = element_blank()
        , line = element_blank()
        , axis.title.x = element_blank()
        , axis.title.y = element_blank()
        , axis.text.x = element_blank()
        , axis.text.y = element_blank()
        ) + 
  labs(title = "NBA Shot Density Over the Past 25 years", caption = "Data: nba.com/stats") +
  geom_path(data = court_points,
            aes(x = x, y = y, group = desc
                # , linetype = dash
                ),
            color = "white", size = .75) +
  scale_linetype_manual(values = c("solid", "longdash"), guide = FALSE) +
  transition_states(season_label, transition_length = 1, state_length = 1) +
  ease_aes('cubic-in-out')

p



```
:::
:::

## Past Performance, Future Performance

```{r, message = FALSE, warning = FALSE}

# read in data from pbpstats--downloaded here: https://www.pbpstats.com

folder_path <- "opp_data"

#get all CSV file names
csv_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)

# import and combine all CSV files
games <- csv_files |>
  set_names(~ tools::file_path_sans_ext(basename(.))) |>  # get file names without .csv
  map_dfr(~ read_csv(.x) |>
            mutate(
              team = tools::file_path_sans_ext(basename(.x)),  # add team column
              game_num = row_number()  # add game number
            ),
          .id = NULL) |>  # no need to keep list names as an id column
  clean_names()

# plot it
games |> filter(game_num<=41) |> select("First 41 games" = fg3pct) |> 
  bind_cols(
    games |> filter(game_num>41) |> select("Last 41 games" = fg3pct) 
  ) |> 
  ggplot(aes(x = `First 41 games`, y = `Last 41 games`)) +
  geom_point(shape = 21, size = 3, fill = "#CCCCFF", color = "white") + 
  geom_smooth(method = "lm", color = "#5F9EA0") +
  stat_cor(method="pearson", family = "Gill Sans") +
  usaidplot::usaid_plot() +
  theme(title = element_text(size = 20)
        ) +
  labs(title = "Three-point defense in the first half of the season is\nbasically uncorrelated with defense in the second half"
       , caption = "Data: NBA via pbpstats.com")

```

## Of course this can all be explained
::: {layout="[ 40, 60 ]"}
::: {#first-column}
::: incremental
- In the 24-25 season, the average defender was *[14.5 feet away](https://www.basketball-reference.com/leagues/NBA_2025.html),* meaning most shots are wide open!
- The first half-second half split is totally arbitrary. 
- Defense simply looks different on the perimeter.
:::
:::

::: {#second-column}

```{r, echo = FALSE, message = FALSE, warning = FALSE, fig.width=14, fig.height=14, out.width="100%"}

library(cmdstanr)

mod <- cmdstan_model("lag_model.stan")

fit_one_lag <- function(lag_i) {
  df <- games |>
    arrange(team, game_num) |>
    group_by(team) |>
    mutate(lagged_fg3pct = lag(fg3pct, lag_i)) |>
    ungroup() |>
    drop_na(fg3pct, lagged_fg3pct)

  if (nrow(df) < 50) return(NULL)  # skip if not enough data

  # Prepare data
  team_factor <- factor(df$team)  # consistent factor definition
  stan_data <- list(
  N = nrow(df),
  J = nlevels(team_factor),
  team = as.integer(team_factor),
  x = df$lagged_fg3pct,
  y = df$fg3pct
  )

  fit <- mod$sample(
    data = stan_data,
    chains = 2, parallel_chains = 2, iter_warmup = 500, iter_sampling = 500,
    refresh = 0, show_messages = FALSE
  )

  draws <- fit$draws(c("beta", "r2")) |> posterior::as_draws_df()

  tibble(
    lag = lag_i,
    beta_mean = mean(draws$beta),
    beta_lower = quantile(draws$beta, 0.025),
    beta_upper = quantile(draws$beta, 0.975),
    r2_mean = mean(draws$r2)
  )
}

# Run for all lags
results_cmdstan <- map_dfr(1:40, possibly(fit_one_lag, NULL))

results_cmdstan |> 
  ggplot(aes(x = lag, y = beta_mean)) +
  geom_line(color = "#5F9EA0", size = 2, lwd = 2) +
  geom_point(color = "#5F9EA0") +
  geom_ribbon(aes(ymin = beta_lower, ymax = beta_upper), alpha = 0.2) +
  geom_hline(yintercept = 0, color = "black") +
  usaidplot::usaid_plot() +
  labs(
    title = "Effect of Lagged 3P% Defense on Current Defense",
    subtitle = "Posterior slope estimates over increasing lags",
    x = "Number of games back",
    y = "Posterior Mean Slope"
  ) +
  theme(axis.text.y = element_text(size = 24)
        , axis.text.x = element_text(size = 24)
        )

```

:::
:::


##  {.center background-color="#CCCCFF"}

The key takeaway is that we are able to measure something that isn't particularly meaningful BUT remains consistently reported.


## Why I still can't shake the figure
::: {layout="[ 40, 60 ]"}
::: {#first-column}

- The NBA is changing: shot quality on two pointers has improved
- It is difficult to leave data behind
- Some teams do seem to improve (see: Celtics, Boston)

:::

::: {#second-column}

```{r, message = FALSE, warning = FALSE, fig.width=14, fig.height=14, out.width="100%"}
shot_quality <- read_csv("shot_quality.csv") |> clean_names()



shot_quality |> group_by(season) |> 
  summarise(r = cor(fg2a, shot_quality_avg)) |> 
  ungroup() |> 
  ggplot(aes(x = season, y = r, group = "group")) +
  geom_line(fill = "#5F9EA0", color = "#5F9EA0", na.rm=T, lineend = "round", lwd = 2) + 
    geom_point(aes(x = "2024-25", y = 0.111), fill = "#5F9EA0", color = "#5F9EA0",size = 6) + 
  geom_hline(yintercept = 0) +

  usaidplot::usaid_plot() + 
    theme(panel.grid.major.x = element_blank()
          , axis.text.x = element_text(angle = 36, hjust = 1)
          , axis.text.y = element_text(size = 36)
          , axis.title.y = element_text(size = 28)
          , title = element_text(size = 30)
          ) +
    labs(x = "", y = "Corr. between two-point attempts and shot quality"
         , title = "Two is worth slightly more as teams adjust")



```
:::
:::


## {background-image="court.jpeg"}

<br>

*Thank you!*

<br>

[github.com/jacobpstein](https://github.com/jacobpstein)



